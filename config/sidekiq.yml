# Options here can still be overridden by cmd line args.
# sidekiq -C config.yml
---
# Avoid having concurrency greater than 50. See https://github.com/mperham/sidekiq/wiki/Advanced-Options
# Concurrency doesn't seem to affect the number of instances shown on NewRelic, so it's likely to be handled by individual threads instead of processes.

demo:
  :concurrency: 5

staging:
  :concurrency: 5

# As of 16th of Aug 2015, we are seeing 30 queued image uploads at one point.
production:
  :concurrency: 50

# Avoid having too many queues. Sidekiq is not designed to work well with dozens of queues. See https://github.com/mperham/sidekiq/wiki/Advanced-Options
:queues:
  - default

# Make sure tasks are run serially. See https://github.com/brainopia/sidekiq-limit_fetch/issues/42
# Works better for queues containing big tasks. Using this for queues with many small tasks (such as routine_task) will considerably delay task execution.
#
# Alternatives:
# - Use sidekiq-unique-jobs but we need to specify an expiration time. It's hard to find a perfect value. Is 30 minutes enough? 1 hour?
# - Use database-record level locks (https://github.com/mperham/sidekiq/issues/1917), but it seems too complicated and not a generic solution.
# - Use a redis-based lock (https://github.com/kenn/redis-mutex). A lock has expiry so we don't have to worry about infinite locking,
#   but it's complicated in that we have to design our loop so that the lock keeps getting renewed until the job is finished.
#:limits:
#  routine_task: 1
